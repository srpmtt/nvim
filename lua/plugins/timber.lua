return {
  "goose97/timber.nvim",
  version = "*",
  event = "VeryLazy",
  config = function()
    require("timber").setup {
      log_templates = {
        default = {
          javascript = [[console.log("%log_target", %log_target)]],
          typescript = [[console.log("%log_target", %log_target)]],
          jsx = [[console.log("%log_target", %log_target)]],
          tsx = [[console.log("%log_target", %log_target)]],
          lua = [[print("%log_target", %log_target)]],
          ruby = [[puts("%log_target #{%log_target}")]],
          elixir = [[IO.inspect(%log_target, label: "%log_target")]],
          go = [[log.Printf("%log_target: %v\n", %log_target)]],
          rust = [[println!("%log_target: {:#?}", %log_target);]],
          python = [[print("%log_target", %log_target)]],
          c = [[printf("%log_target: %s\n", %log_target);]],
          cpp = [[std::cout << "%log_target: " << %log_target << std::endl;]],
          java = [[System.out.println("%log_target: " + %log_target);]],
          c_sharp = [[Console.WriteLine($"%log_target: {%log_target}");]],
          odin = [[fmt.printfln("%log_target: %v", %log_target)]],
          swift = [[print("%log_target:", %log_target)]],
          kotlin = [[println("%log_target: ${%log_target}")]],
        },
        plain = {
          javascript = [[console.log("%insert_cursor")]],
          typescript = [[console.log("%insert_cursor")]],
          jsx = [[console.log("%insert_cursor")]],
          tsx = [[console.log("%insert_cursor")]],
          lua = [[print("%insert_cursor")]],
          ruby = [[puts("%insert_cursor")]],
          elixir = [[IO.puts(%insert_cursor)]],
          go = [[log.Printf("%insert_cursor")]],
          rust = [[println!("%insert_cursor");]],
          python = [[print("%insert_cursor")]],
          c = [[printf("%insert_cursor \n");]],
          cpp = [[std::cout << "%insert_cursor" << std::endl;]],
          java = [[System.out.println("%insert_cursor");]],
          c_sharp = [[Console.WriteLine("%insert_cursor");]],
          odin = [[fmt.println("%insert_cursor")]],
          swift = [[print("%insert_cursor")]],
          kotlin = [[println("%insert_cursor")]],
        },
      },
      batch_log_templates = {
        default = {
          javascript = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
          typescript = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
          jsx = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
          tsx = [[console.log({ %repeat<"%log_target": %log_target><, > })]],
          lua = [[print(string.format("%repeat<%log_target=%s><, >", %repeat<%log_target><, >))]],
          ruby = [[puts("%repeat<%log_target: #{%log_target}><, >")]],
          elixir = [[IO.inspect({ %repeat<%log_target><, > })]],
          go = [[log.Printf("%repeat<%log_target: %v><, >\n", %repeat<%log_target><, >)]],
          rust = [[println!("%repeat<%log_target: {:#?}><, >", %repeat<%log_target><, >);]],
          python = [[print(%repeat<"%log_target", %log_target><, >)]],
          c = [[printf("%repeat<%log_target: %s><, >\n", %repeat<%log_target><, >);]],
          cpp = [[std::cout %repeat<<< "%log_target: " << %log_target>< << "\n  " > << std::endl;]],
          java = [[System.out.printf("%repeat<%log_target=%s><, >%n", %repeat<%log_target><, >);]],
          c_sharp = [[Console.WriteLine($"%repeat<%log_target: {%log_target}><, >");]],
          odin = [[fmt.printfln("%repeat<%log_target: %v><, >", %repeat<%log_target><, >)]],
          swift = [[print("%repeat<%log_target: %log_target><, >")]],
          kotlin = [[println("%repeat<%log_target=${%log_target}><, >")]],
        },
      },
      template_placeholders = {
        filename = function()
          return vim.fn.expand "%:t"
        end,
      },
      log_marker = "ðŸªµ",
      highlight = {
        on_insert = true,
        on_add_to_batch = true,
        on_summary_show_entry = true,
        duration = 500,
      },
      keymaps = {
        insert_log_below = "<leader>ll",
        -- insert_log_above = "glk",
        -- insert_plain_log_below = "glo",
        -- insert_plain_log_above = "gl<S-o>",
        -- insert_batch_log = "glb",
        -- add_log_targets_to_batch = "gla",
        -- insert_log_below_operator = "g<S-l>j",
        -- insert_log_above_operator = "g<S-l>k",
        -- insert_batch_log_operator = "g<S-l>b",
        -- add_log_targets_to_batch_operator = "g<S-l>a",
      },
      default_keymaps_enabled = true,
      log_watcher = {
        enabled = false,
        sources = {},
        preview_snippet_length = 32,
      },
      log_summary = {
        keymaps = {
          show_entry = "<CR>",
          jump_to_entry = "o",
          next_entry = "]]",
          prev_entry = "[[",
          close = "q",
        },
        default_keymaps_enabled = true,
        win = {
          width = { 60, 0.4 },
          position = "left",
          opts = {},
        },
      },
    }
  end,
}
